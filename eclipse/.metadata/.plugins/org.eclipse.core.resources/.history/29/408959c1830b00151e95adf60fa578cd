package com.superzanti.serversync;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiErrorScreen;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.gui.GuiMultiplayer;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiScreenWorking;
import net.minecraft.client.gui.GuiYesNo;
import net.minecraft.client.gui.GuiYesNoCallback;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.client.multiplayer.ServerData;
import cpw.mods.fml.client.FMLClientHandler;
import cpw.mods.fml.relauncher.SideOnly;
import cpw.mods.fml.relauncher.Side;

@SideOnly(Side.CLIENT)
public class SyncClient implements GuiYesNoCallback{
	
	private static GuiScreenWorking guiscreenworking;
	private static GuiMainMenu guimainmenu;
	
	private static Socket socket;
	private static ObjectInputStream ois;
	private static ObjectOutputStream oos;
	private static InetAddress host = null;
	
	protected static boolean errorInUpdates;
	protected static boolean updateHappened;
	
	protected SyncClient() {
		ServerSyncRegistry.logger.info("Client Selected! Begining client routine...");
		return;
	}
	
	protected void runClient() throws Exception {
		
		guimainmenu = new GuiMainMenu();
		guiscreenworking = new GuiScreenWorking();
		Minecraft.getMinecraft().displayGuiScreen(guiscreenworking);
		updateScreenWorking(0,"Checking for server updates...");
		guiscreenworking.updateScreen();
		
		Thread.sleep(100);
		
		boolean completedSuccessfully = clientConnection();
		

        if(errorInUpdates || !completedSuccessfully){
    		GuiErrorScreen guierrorscreen = new GuiErrorScreen("There was an error while connecting", "Make sure your config file is the same as the server's");
            Minecraft.getMinecraft().displayGuiScreen(guierrorscreen);
        //if there was an update
        } else if(updateHappened){
        	GuiYesNo guiyesno = new GuiYesNo((GuiYesNoCallback) this, "You will need to re-launch minecraft to apply the changes.", "Would you like to do this now?", 0);
        	Minecraft.getMinecraft().displayGuiScreen(guiyesno);
		//if there were no updates or failures go ahead and connect to the server
        } else {
        	//ServerData serverData = new ServerData("Command Line", ServerSyncRegistry.SERVER_IP+":"+ServerSyncRegistry.MINECRAFT_PORT);
    		//GuiConnecting guiconnecting = new GuiConnecting(guimainmenu, Minecraft.getMinecraft(), serverData);
        	//GuiMultiplayer guiconnecting = new GuiMultiplayer(Minecraft.getMinecraft().currentScreen);
        	//Minecraft.getMinecraft().displayGuiScreen(guiconnecting);
        	FMLClientHandler.instance().connectToServerAtStartup(ServerSyncRegistry.SERVER_IP, ServerSyncRegistry.MINECRAFT_PORT);
        }
		
        return;
	}
	
	
	public boolean clientConnection() {
		// use the ip address of the server to get the host
        try {
			host = InetAddress.getByName(ServerSyncRegistry.SERVER_IP);
		} catch (UnknownHostException e) {
			ServerSyncRegistry.logger.error("Exception caught! - " + e);
			errorInUpdates = true;
			return false;
		}
        socket = null;
        oos = null;
        ois = null;
        updateScreenWorking(1,"Connected to server...");
		try {
		    //establish socket connection to server
			ServerSyncRegistry.logger.info("Establishing a socket connection to the server...");
			socket = new Socket(host.getHostName(), ServerSyncRegistry.SERVER_PORT);
			
			updateScreenWorking(2,"Socket established...");
			
			//write to socket using ObjectOutputStream
			ServerSyncRegistry.logger.info("Creaing input/output streams...");
			oos = new ObjectOutputStream(socket.getOutputStream());
			ois = new ObjectInputStream(socket.getInputStream());
			
			updateScreenWorking(3,"Streams established...");
			
			ServerSyncRegistry.logger.info("Sending requests to Socket Server...");
			
			//get all files on server
			ServerSyncRegistry.logger.info("Getting the files on the server...");
			oos.writeObject(ServerSyncRegistry.SECURE_RECURSIVE);
			oos.flush();
			//read the server response message
			ArrayList<String> fileTree = new ArrayList<String>();
			fileTree = (ArrayList) ois.readObject();
			ServerSyncRegistry.logger.info(fileTree);
			
			updateScreenWorking(4,"Got filetree from server...");
			
			//get all the files at home so we can update the progress bar
			ArrayList<String> allList = new ArrayList<String>();
			allList.addAll(dirContents("./mods"));
			allList.addAll(dirContents("./config"));
			
			updateScreenWorking(5,"Got filetree from client...");
		    
		    // run calculations to figure out how big the bar is
		    float numberOfFiles = allList.size() + fileTree.size();
		    float percentScale = numberOfFiles/92;
		    float currentPercent = 0;
			
			for(String singleFile : fileTree){
				currentPercent = currentPercent + 1;
				updateScreenWorking((int)(5+(currentPercent/percentScale)),"Checking server's " + singleFile);
				File f = new File(singleFile);
				if(f.exists() && !f.isDirectory()){
					oos.writeObject(ServerSyncRegistry.SECURE_CHECKSUM);
					oos.flush();
					oos.writeObject(singleFile);
					oos.flush();
					String serverChecksum = (String) ois.readObject();
					// if the checksums do not match, update the file
					if(!Md5.md5String(f).equals(serverChecksum)){
						if (ServerSyncRegistry.IGNORE_LIST.contains(singleFile.replace('\\',  '/'))){
							ServerSyncRegistry.logger.info("Ignoring: " + singleFile.replace('\\', '/'));
						}else{
							ServerSyncRegistry.logger.info(singleFile.replace('\\', '/') + " Does not match... Updating...");
							oos.writeObject(ServerSyncRegistry.SECURE_UPDATE);
							oos.flush();
							oos.writeObject(singleFile);
							oos.flush();
							
							updateScreenWorking((int)(5+(currentPercent/percentScale)),"Updating " + singleFile);
							
							// download the file
							File updated = new File(singleFile);
							updated.getParentFile().mkdirs();
							FileOutputStream wr = new FileOutputStream(updated);
							byte[] outBuffer = new byte[socket.getReceiveBufferSize()];
							int bytesReceived = 0;
							while((bytesReceived = ois.read(outBuffer))>0) {
								wr.write(outBuffer, 0, bytesReceived);
							}
							wr.flush();
							wr.close();
							reinitConn();
							updateHappened = true;
						}
					} else {
						ServerSyncRegistry.logger.info("We have a match! "+ singleFile.replace('\\', '/'));
					}
				} else {
					if (ServerSyncRegistry.IGNORE_LIST.contains(singleFile.replace('\\',  '/'))){
						ServerSyncRegistry.logger.info("Ignoring: " + singleFile.replace('\\', '/'));
					}else{
						ServerSyncRegistry.logger.info(singleFile + " Does not match... Updating...");
						oos.writeObject(ServerSyncRegistry.SECURE_UPDATE);
						oos.flush();
						oos.writeObject(singleFile);
						oos.flush();
						
						updateScreenWorking((int)(5+(currentPercent/percentScale)),"Updating " + singleFile.replace('\\', '/'));
						
						// download the file
						File updated = new File(singleFile);
						updated.getParentFile().mkdirs();
						FileOutputStream wr = new FileOutputStream(updated);
						byte[] outBuffer = new byte[socket.getReceiveBufferSize()];
						int bytesReceived = 0;
						while((bytesReceived = ois.read(outBuffer))>0) {
							wr.write(outBuffer, 0, bytesReceived);
						}
						wr.flush();
						wr.close();
						reinitConn();
						updateHappened = true;
					}
				}
			}
		    
		    for (String singleFile : allList){
		    	currentPercent++;
				updateScreenWorking((int)(5+(currentPercent/percentScale)),"Checking client's " + singleFile);
				
		    	ServerSyncRegistry.logger.info("Checking client's files against the server's...");
		    	oos.writeObject(ServerSyncRegistry.SECURE_EXISTS);
				oos.flush();
				oos.writeObject(singleFile);
				oos.flush();
				
				// check for files that need to be deleted
				String doesExist = (String) ois.readObject();
				
				if (ServerSyncRegistry.IGNORE_LIST.contains(singleFile.replace('\\',  '/'))){
					ServerSyncRegistry.logger.info("Ignoring: " + singleFile.replace('\\', '/'));
				}else{
					if(doesExist.equalsIgnoreCase("false")){
						ServerSyncRegistry.logger.info(singleFile + " Does not match... Deleting...");
						updateScreenWorking((int)(5+(currentPercent/percentScale)),"Deleting client's " + singleFile);
						File deleteMe = new File(singleFile);
						deleteMe.delete();
						updateHappened = true;
					}
					//reinitConn();
				}
		    	
		    }
		    
		    updateScreenWorking(98,"Telling Server to Exit...");
			
		    ServerSyncRegistry.logger.info("Update Complete! Have a nice day!");
			oos.writeObject(ServerSyncRegistry.SECURE_EXIT);
			oos.flush();
		} catch (Exception e) {
			ServerSyncRegistry.logger.error("Exception caught! - " + e);
			errorInUpdates = true;
			return false;
		} finally {
			try {
				updateScreenWorking(99,"Closing connections...");
				ois.close();
				oos.close();
				Thread.sleep(100);
				socket.close();
			} catch (IOException e) {
				ServerSyncRegistry.logger.error("Exception caught! - " + e);
				errorInUpdates = true;
				return false;
			} //close resources here!
			catch (InterruptedException e) {
				ServerSyncRegistry.logger.error("Exception caught! - " + e);
				errorInUpdates = true;
				return false;
			}
			ServerSyncRegistry.logger.info("All of serversync's sockets to the server have been closed.");
		}
		
		updateScreenWorking(100,"Finished!");
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			ServerSyncRegistry.logger.error("Exception caught! - " + e);
			return false;
		}
		return true;
	}
	
	protected static void updateScreenWorking(int newPercent, String statusMessage){
		guiscreenworking.displayProgressMessage(statusMessage);
		guiscreenworking.setLoadingProgress(newPercent);
		guiscreenworking.updateScreen();
		return;
	}
	
	@Override
	public void confirmClicked(boolean yesButton, int whatsThisInt) {
		if(yesButton)
			Minecraft.getMinecraft().shutdown();
		else
			Minecraft.getMinecraft().displayGuiScreen(guimainmenu);
		return;
	}
	
	private static ArrayList<String> dirContents(String dir) {
		ServerSyncRegistry.logger.info("Getting all of " + dir.replace('\\', '/') + "'s folder contents");
		File f = new File(dir);
		File[] files = f.listFiles();
		ArrayList<String> dirList = new ArrayList<String>();
		// Loop through all the directories and only add to the list if it's a file
		for (File file : files) {
			if (file.isDirectory()) {
				dirContents(file.getPath());
			} else {
				dirList.add(file.toString());
			}
		}
		return dirList;
	}
	
	private static void reinitConn() throws Exception {
		ServerSyncRegistry.logger.info("Reinitializing the connection...");
		oos.flush();
		// close our resources and set values to null
		oos.close();
		ois.close();
		Thread.sleep(10);
		socket.close();
        socket = null;
        oos = null;
        ois = null;
		socket = new Socket(host.getHostName(), ServerSyncRegistry.SERVER_PORT);
		// write to socket using ObjectOutputStream
		oos = new ObjectOutputStream(socket.getOutputStream());
		ois = new ObjectInputStream(socket.getInputStream());
		ServerSyncRegistry.logger.info("Sending requests to Socket Server...");
		return;
	}

}
